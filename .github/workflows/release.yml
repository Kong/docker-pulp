---
name: release

on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
  push:
    paths-ignore:
    - .github/**
    branches:
    - main
  pull_request:
    paths-ignore:
    - .github/**

env:
  #BUILD_CACHE: ${{ env.GITHUB_WORKSPACE }}/../imagecache # no env. contenxt at top level :/
  BUILD_CACHE: /tmp/imagecache
  CORE_CACHEFILE: pulp_core.tar
  IMAGE_ARTIFACT: pulp_images.tar

jobs:
  build:
    name: Build containers
    runs-on: ubuntu-latest
    env:
      # use per-run tag for build, but consistent tag for cache purposes
      BUILD_TAG: ${{ github.job }}.${{ github.run_id }}
      CACHE_TAG: buildcache
    outputs:
      cache_tag: ${{ env.CACHE_TAG }}
      cache_key: ${{ env.CACHE_KEY }}
    steps:
    - uses: actions/checkout@v3.0.0
    - name: calculate cache key
      env:
        FILE_TO_HASH: pulp-core/Dockerfile
      run: |
        if [[ -f "$FILE_TO_HASH" && -r "$FILE_TO_HASH" ]]
        then
          # you can't use the env context as an arg for hashFiles, but it just does a sha256 :/
          printf "CACHE_KEY=pulp.%s\n" $(sha256sum "$FILE_TO_HASH" | awk '$0=$1') >> $GITHUB_ENV
        else
          echo "Misisng '$FILE_TO_HASH'; this will probably fail later but setting default key anyway"
          printf "CACHE_KEY=HoorayForDanny\n" >> $GITHUB_ENV
        fi
    - uses: actions/cache@v3.0.3
      id: cache
      with:
        path: ${{ env.BUILD_CACHE }}
        key: ${{ env.CACHE_KEY   }}

    - name: Import cached image
      if: ${{ steps.cache.outputs.cache-hit }}
      run: |
        OUTFILE="$BUILD_CACHE/$CORE_CACHEFILE"
        if [[ -f "$OUTFILE" && -r "$OUTFILE" ]]
        then
          printf "Importing $OUTFILE\n"
          docker import "$OUTFILE"
        fi
        docker images
        true
    - name: Build job-specific image
      env:
        DOCKER_BUILDKIT: 1
        ORG: kong
        TAG: ${{ env.BUILD_TAG }}
        IS_PREBUILD: 1
      run: |
        make images
        # make these vars usable in later steps
        for V in ORG TAG
        do
          printf "%s=%s\n" "$V" "${!V}"
        done >> $GITHUB_ENV
    - name: Export image to cache
      # don't bother exporting, since the cache won't be updated if hit :/
      #if: !${{ steps.cache.outputs.cache-hit }}
      run: |
        mkdir -p "$BUILD_CACHE"
        cd "$BUILD_CACHE"
        # retag with common tag for future builds
        SPECIAL_IMAGE="$ORG/pulp-core:$CACHE_TAG"
        docker tag "$ORG/pulp-core:$TAG" "$SPECIAL_IMAGE"
        docker save --output="$CORE_CACHEFILE" "$SPECIAL_IMAGE"
    - name: Export images for artifact
      id: artifact_export
      run: |
        docker save --output="$IMAGE_ARTIFACT" $( docker images --format '{{.Repository}}:{{.Tag}}' "$ORG/*:$TAG" )
    - name: Save build artifact
      uses: actions/upload-artifact@v3.0.0
      with:
        name: images
        path: ${{ env.IMAGE_ARTIFACT }}

  release:
    name: Create Github Release
    needs: build
    if: ${{ github.ref == 'refs/heads/main' && ( github.event_name == 'push' || github.event_name == 'workflow_dispatch' ) }}
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.versioning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3.0.0
      with:
        fetch-depth: 0 # need all refs for tag generation
    - uses: actions/cache@v3.0.3
      with:
        path: ${{ env.BUILD_CACHE }}
        key: ${{ needs.build.outputs.cache_key }}

    - name: Auto Increment Semver Action
      uses: MCKanpolat/auto-semver-action@1.0.7
      id: versioning
      with:
        releaseType: patch
        # this is a read-only action, I think, so either token is ok
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: Commit back
      uses: actions-js/push@master
      with:
        # commit back with Github token to avoid retriggering actions
        github_token: ${{ secrets.GITHUB_TOKEN }}
        message: Release ${{ steps.versioning.outputs.version }}
        branch: main
    - name: Create Github Release
      uses: actions/create-release@v1.1.4
      if: steps['versioning']['outputs']['RETURN_STATUS'] == '0'
      env:
        # release with PAT to trigger more actions
        GITHUB_TOKEN: ${{ secrets.ACTION_TOKEN }}
      with:
        tag_name: ${{ steps.versioning.outputs.version }}
        release_name: ${{ steps.versioning.outputs.version }}
        body: Version ${{ steps.versioning.outputs.version }}
        draft: false
        prerelease: false

  publish:
    name: Publish Release
    needs: [build, release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag:
        - ${{ needs.release.outputs.tag }}
        - latest
    steps:
    - uses: actions/checkout@v3.0.0
    - uses: actions/cache@v3.0.3
      id: cache
      with:
        path: ${{ env.BUILD_CACHE }}
        key: ${{ needs.build.outputs.cache_key }}
    - name: Login to DockerHub
      uses: docker/login-action@v1.14.1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Import cached image
      if: ${{ steps.cache.outputs.cache-hit }}
      run: |
        if [[ -f "$CORE_CACHEFILE" && -r "$CORE_CACHEFILE" ]]
        then
          docker import "$CORE_CACHEFILE"
        else
          printf "$CORE_CACHEFILE not found? Weird. \n"
          ls -a "$( dirname "$CORE_CACHEFILE" )"
        fi
    - name: Build (retag) images
      env:
        DOCKER_BUILDKIT: 1
        ORG: kong
        TAG: ${{ matrix.tag }}
        CACHE_TAG: ${{ needs.build.cache_tag }}
      run: |
        make images
        # make these vars usable in later steps
        for V in ORG TAG
        do
          printf "%s=%s\n" "$V" "${!V}"
        done >> $GITHUB_ENV
    - name: Publish images
      run: |
        make release
